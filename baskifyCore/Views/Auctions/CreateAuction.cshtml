@model AuctionModel
@{
    ViewData["Title"] = "Create Auction";
}


<script src="~/js/moment-with-locales.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=@baskifyCore.Utilities.AuctionUtilities.getGoogleAPI()&callback=initMap" defer></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

<div id="accountSettings">
    <div class="goBack">Back to <a href="/auctions">Auctions</a></div>
    <div id="accountSettingContainer">
        @using (Html.BeginForm("createAuction", "auctions", FormMethod.Post, new { @id = "auctionInfoForm", enctype = "multipart/form-data" }))
        {
            @Html.ValidationSummary(true)
        <fieldset>
            <legend>Auction Information</legend>
            <div class="form-group">
                @Html.LabelFor(Model => Model.Title)
                @Html.TextBoxFor(Model => Model.Title, null, new { @class = "form-control" })
                @Html.ValidationMessageFor(Model => Model.Title)
            </div>
            <div class="form-group">
                @Html.LabelFor(Model => Model.Description)
                @Html.TextAreaFor(Model => Model.Description, 5, 50, new { @class = "form-control" })
                @Html.ValidationMessageFor(Model => Model.Description)
            </div>
            <div class="form-group">
                @Html.Label("Auction Date Range")
                <input type="text" id="dateRangePicker" name="datetimes" class="form-control" />
                @Html.HiddenFor(Model => Model.StartTime)
                @Html.HiddenFor(Model => Model.EndTime)
                @Html.ValidationMessageFor(Model => Model.StartTime)
                @Html.ValidationMessageFor(Model => Model.EndTime)
            </div>
            <div class="form-group">
                @Html.LabelFor(Model => Model.TicketCost)
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text">$</span>
                    </div>
                    @Html.TextBoxFor(Model => Model.TicketCost, null, new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(Model => Model.TicketCost)
            </div>
            <div class="form-group">
                @Html.LabelFor(Model => Model.MinPurchase)
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text">$</span>
                    </div>
                    @Html.TextBoxFor(Model => Model.MinPurchase, null, new { @class = "form-control" })
                </div>
                @Html.ValidationMessageFor(Model => Model.MinPurchase)
            </div>
            <div class="form-group">
                @Html.LabelFor(Model => Model.DeliveryType)
                @Html.DropDownListFor(Model => Model.DeliveryType, Html.GetEnumSelectList<DeliveryTypes>(), "Select Delivery Type", new { @class = "custom-select" })
                @Html.ValidationMessageFor(Model => Model.DeliveryType)
            </div>
            <div id="basketRetrievalGroup" class="form-group">
                @Html.LabelFor(Model => Model.BasketRetrieval)
                @Html.DropDownListFor(Model => Model.BasketRetrieval, Html.GetEnumSelectList<BasketRetrieval>(), "Select Retrieval Type", new { @class = "custom-select" })
                @Html.ValidationMessageFor(Model => Model.BasketRetrieval)
            </div>
            <legend>Where Will You Be Hosting From?</legend>
            <div class="form-group">
                @Html.LabelFor(Model => Model.Address)
                @Html.TextBoxFor(Model => Model.Address, null, new { @class = "form-control" })
                @Html.ValidationMessageFor(Model => Model.Address)
            </div>
            <div class="form-group">
                @Html.LabelFor(Model => Model.City)
                @Html.TextBoxFor(Model => Model.City, null, new { @class = "form-control" })
                @Html.ValidationMessageFor(Model => Model.City)
            </div>
            <div class="form-group">
                @Html.LabelFor(Model => Model.State)
                @Html.TextBoxFor(Model => Model.State, null, new { @class = "form-control" })
                @Html.ValidationMessageFor(Model => Model.State)
            </div>
            <div class="form-group">
                @Html.LabelFor(Model => Model.ZIP)
                @Html.TextBoxFor(Model => Model.ZIP, null, new { @class = "form-control" })
                @Html.ValidationMessageFor(Model => Model.ZIP)
            </div>
            <label style="color:red;" id="addressValidationResult"></label>
            <div class="form-group">
                @Html.LabelFor(Model => Model.MaxRange)
                <div style="display: flex">
                    @Html.TextBoxFor(Model => Model.MaxRange, null, new { @type = "range", @class = "custom-range", min = AuctionModel.MinDistance, max = AuctionModel.MaxDistance, flex = .9 })
                    <div id="SelectedRange" style="font-weight: bold; flex: .1; white-space: nowrap; margin-left: 6px; min-width: 80px;"><span>30</span> miles</div>
                </div>
                @Html.ValidationMessageFor(Model => Model.MaxRange)
            </div>
            <div id="userAddressMap"></div>
            @Html.HiddenFor(Model => Model.HostUsername)
            <label for="exampleInputFile">Upload a Banner Picture</label>
            <div class="form-group">
                @Html.TextBoxFor(Model => Model.BannerImage, new { @type = "file", @class = "form-control-file", @id = "inputBannerFile" })
                <small id="fileHelp" class="form-text text-muted">Upload an image that encapsulates your goal! Recommended: 300px x 1000px</small>
            </div>
            <div style="display: flex;">
                <button id="submitButton" type="submit" class="btn btn-success btn-lg btn-block">Create Auction</button>
            </div>
        </fieldset>
        }

    </div>
</div>
<script>
    var ServiceRadius;
    var map;
    var marker;
    function initMap() {
        // Create the map.
        var initCoords = { lat: @Model.Latitude, lng: @Model.Longitude };

        map = new google.maps.Map(document.getElementById('userAddressMap'), {
            zoom: 10,
            center: initCoords,
            mapTypeId: 'terrain'
        });

        marker = new google.maps.Marker({
            position: initCoords,
            map: map,
            title: 'Your Organization'
        });

        ServiceRadius = new google.maps.Circle({
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0000',
            fillOpacity: 0.35,
            map: map,
            center: initCoords,
            radius: @Model.MaxRange * 1609.34 //mile to meter conversion
        });
    }

$("#MaxRange").on("change", function (e) {
    if ($("#MaxRange").val() == @AuctionModel.MaxDistance) //unbind the radius if we hit max
        ServiceRadius.setMap(null);
    else
        ServiceRadius.setMap(map);

    $("#SelectedRange span").html($("#MaxRange").val() == @AuctionModel.MaxDistance? "&infin;" : $("#MaxRange").val());
        ServiceRadius.setRadius($("#MaxRange").val() * 1609.34)
    });

    $("#DeliveryType").on("change", function (e) {
            if ($(this).val() == @((int)DeliveryTypes.Pickup) || $(this).val() == @((int)DeliveryTypes.DeliveryByOrg))
                $("#basketRetrievalGroup").css("display", "block");
            else {
                $("#basketRetrievalGroup").css("display", "none");
                $("#BasketRetrieval").val("");
            }
        });

    $(function () {
        $("#basketRetrievalGroup").css("display", "none");

        $("#DeliveryType").change(); //trigger update

        initMap()
        $('input[name="datetimes"]').daterangepicker({
            timePicker: true,
            startDate: "@Model.StartTime",
            endDate: "@Model.EndTime",
            locale: {
                format: 'MM/DD/YYYY hh:mm:ss A'
            },
            dateLimit: {
                'months': 1,
                'days': -1
            }
        });

        //updates the address field with validation info
        $("#Address,#City,#State,#ZIP").on("blur", function () {
            if ($("#Address").val() == "" || $("#City").val() == "" || $("#State").val() == "" || $("#ZIP").val() == "") {
                return
            }

            $.post("/account/validateAddress",
                {
                    Address: $("#Address").val(),
                    City: $("#City").val(),
                    State: $("#State").val(),
                    ZIP: $("#ZIP").val()
                },
                function (data) {
                    var dataObject = JSON.parse(data);
                    if (dataObject["resultStatus"] != "ADDRESS NOT FOUND") {
                        $("#Address").val(dataObject["addressLine1"]);
                        $("#City").val(dataObject["city"]);
                        $("#State").val(dataObject["state"]);
                        $("#ZIP").val(dataObject["zip"]);

                        var newLocation = { lat: parseFloat(dataObject["lat"]), lng: parseFloat(dataObject["lng"]) }
                        marker.setPosition(newLocation);
                        ServiceRadius.setCenter(newLocation);
                        ServiceRadius.setRadius($("#MaxRange").val() * 1609.34);
                        map.setCenter(newLocation);

                        $("#addressValidationResult").html("");
                    }
                    else {
                        $("#addressValidationResult").html("Address Not Found!");
                    }
            });
        });

    });

    $("#dateRangePicker").on("change", function (e) {
        $("#StartTime").val($("#dateRangePicker").val().split(" - ")[0]);
        $("#EndTime").val($("#dateRangePicker").val().split(" - ")[1]);
    });

    $("#MaxRange").on("change", function (e) {
        $("#SelectedRange span").html($("#MaxRange").val() == @AuctionModel.MaxDistance? "&infin;" : $("#MaxRange").val());
    });
    window.history.replaceState(null, "", '/auctions/createauction');
</script>

