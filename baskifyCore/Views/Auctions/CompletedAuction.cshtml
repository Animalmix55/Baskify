@model AuctionModel
@{
    ViewData["Title"] = Model.Title;
}

<script src="~/js/moment-with-locales.js"></script>
<script src="~/Chart/Chart.bundle.min.js"></script>
<script src="~/galleria/galleria.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/responsive/2.2.4/css/responsive.dataTables.min.css" />
<script type="text/javascript" charset="utf8" src="https://cdn.datatables.net/1.10.21/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/responsive/2.2.4/js/dataTables.responsive.min.js"></script>
<script type="text/javascript" charset="utf-8" src="https://cdn.datatables.net/1.10.21/js/dataTables.bootstrap4.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.21/css/dataTables.bootstrap4.min.css" />
<script src="https://maps.googleapis.com/maps/api/js?key=@baskifyCore.Utilities.AuctionUtilities.getGoogleAPI()" defer></script>

<div id="basketDataModal" class="modal">
</div>

<div id="error-alert" class="alert alert-dismissible alert-warning" style="margin-bottom: 0; display: none">
    <button type="button" class="close" data-hide="alert">&times;</button>
    <h4 class="alert-heading">Error!</h4>
    <p class="mb-0"></p>
</div>

<div id="accountSettings">
    <div id="accountSettingContainer">
        <div id="auctionAddLink" class="alert alert-dismissible alert-info">
            <button type="button" class="close" data-hide="alert">&times;</button>
            <span>This auction has completed!</span>
        </div>
        <div class="goBack">Back to <a href="/auctions">Auctions</a></div>

        @if (!String.IsNullOrWhiteSpace(Model.BannerImageUrl))
        {
            <img class="AuctionBannerImage" src="@Model.BannerImageUrl" />
        }

        <ul class="nav nav-tabs" id="AuctionNavTabs">
            <li class="nav-item">
                <a class="nav-link active" data-toggle="tab" href="#auctionInfo">Auction Info</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-toggle="tab" href="#baskets">Baskets</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-toggle="tab" href="#performance">Performance</a>
            </li>
        </ul>
        <div id="myTabContent" class="tab-content">
            <div class="tab-pane fade active show" id="auctionInfo">
                @using (Html.BeginForm("editAuction", "auctions", FormMethod.Post, new { @id = "auctionInfoForm", enctype = "multipart/form-data" }))
                {
                <fieldset>
                    <legend>Auction Information</legend>
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.Title)
                        @Html.TextBoxFor(Model => Model.Title, null, new { @readonly = "readonly", @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.Description)
                        @Html.TextAreaFor(Model => Model.Description, 5, 50, new { @readonly = "readonly", @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.DeliveryType)
                        @Html.DropDownListFor(Model => Model.DeliveryType, Html.GetEnumSelectList<DeliveryTypes>(), "Select Delivery Type", new { @disabled = "disabled", @class = "custom-select" })
                    </div>
                    @if (Model.DeliveryType == DeliveryTypes.Pickup || Model.DeliveryType == DeliveryTypes.DeliveryByOrg)
                    {
                        <div id="basketRetrievalGroup" class="form-group">
                            @Html.LabelFor(Model => Model.BasketRetrieval)
                            @Html.DropDownListFor(Model => Model.BasketRetrieval, Html.GetEnumSelectList<BasketRetrieval>(), "Select Retrieval Type", new { @disabled = "disabled", @class = "custom-select" })
                        </div>
                    }
                    <div class="form-group">
                        @Html.Label("Auction Start Date")
                        @Html.TextBoxFor(Model => Model.StartTime, new { @readonly = "readonly", @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.Label("Auction End Date")
                        @Html.TextBoxFor(Model => Model.EndTime, new { @readonly = "readonly", @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.Address)
                        @Html.TextBoxFor(Model => Model.Address, new { @readonly = "readonly", @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.City)
                        @Html.TextBoxFor(Model => Model.City, new { @readonly = "readonly", @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.State)
                        @Html.TextBoxFor(Model => Model.State, new { @readonly = "readonly", @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.ZIP)
                        @Html.TextBoxFor(Model => Model.ZIP, new { @readonly = "readonly", @class = "form-control" })
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(Model => Model.MaxRange)
                        @Html.HiddenFor(Model => Model.MaxRange)
                        <input class="form-control" value="@Model.MaxRange miles" readonly />
                    </div>
                    <div id="userAddressMap"></div>

                    @Html.HiddenFor(Model => Model.AuctionId)
                    @Html.HiddenFor(Model => Model.HostUsername)
                </fieldset>
                }
            </div>
            <div class="tab-pane fade" id="baskets" style="overflow-x: hidden;">
                <table id="basketTable" class="table table-hover" style="width:100%;">
                    <thead>
                        <tr>
                            <th>Info</th>
                            <th>Basket Name</th>
                            <th>Winner</th>
                            <th>Tickets Entered</th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div id="performance" class="tab-pane fade maxWidthContainer">
                <div id="chartContainer" style="width:100%; height:50vh; position:relative;">
                    <canvas id="salesChart"></canvas>
                </div>
                <table id="salesTable" class="table table-hover" style="width:100%;">
                    <thead>
                        <tr>
                            <th>Info</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>User</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
    @if (!Model.isDrawn)
    {
        <button id="drawAuctionButton" style="position:sticky; width:100%; height:5vh; bottom:0px; z-index:50" class="btn btn-success" onclick="drawAuction()">Draw Winners</button>
    }
</div>
<div id="basketDetailsModal" style="position: fixed;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.25);
    left: 0;
    z-index: 333;
    right: 0;
    top: 0;
    bottom: 0;
    display:none;">
</div>
<script>

    var ServiceRadius;
    var map;
    var marker;
    function initMap() {
        // Create the map.
        var initCoords = { lat: @Model.Latitude, lng: @Model.Longitude };

        map = new google.maps.Map(document.getElementById('userAddressMap'), {
            zoom: 10,
            center: initCoords,
            mapTypeId: 'terrain'
        });

        marker = new google.maps.Marker({
            position: initCoords,
            map: map,
            title: 'Your Organization'
        });

        ServiceRadius = new google.maps.Circle({
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0000',
            fillOpacity: 0.35,
            map: map,
            center: initCoords,
            radius: @Model.MaxRange * 1609.34 //mile to meter conversion
        });
    }

    var basketTable = $("#basketTable");

    $(document).ready(function () {
        initMap();
        $('a[data-toggle="tab"]').on('show.bs.tab', function (e) {
            localStorage.setItem('activeTab', $(e.target).attr('href'));
        });
        $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) { //when tab is fully visible
            var table = $(".table").DataTable();
            table.draw(); //redraw to avoid issues
            table.responsive.recalc(); //recalculate width for responsiveness
        });
        var activeTab = localStorage.getItem('activeTab');
        if (activeTab) {
            $("#AuctionNavTabs a").removeClass("active");
            $('a[href="' + activeTab + '"]').addClass("active");
            $('#myTabContent').children().removeClass('active show')
            $(activeTab).addClass('active show');
        }
    }); //sets the appropriate open tab

    $(function () {
        Galleria.loadTheme('/galleria/themes/twelve/galleria.twelve.js');
        Galleria.configure({
            imageCrop: true,
            lightbox: true,
            transition: 'fade',
            idleMode: false
        });
    }()); //loads galleria

    //Datatables
    basketTable.dataTable({
        ajax: {
            url: "/api/auctions/@Model.AuctionId/detailedBaskets",
            type: "GET",
            dataSrc: "",
            beforeSend: function (xhr) { //add token
                var token = getCookie("BearerToken");
                if (token != "")
                    xhr.setRequestHeader("Authorization", "Bearer " + token);
            }
        },
        createdRow: function (row, data, dataIndex) {
            $(row).attr("id", "basketRow-" + data["basketId"]);
            $(row).find(".data").attr("onclick", "viewBasket(" + data["basketId"] + ")");
            $(row).css("cursor", "pointer");
        },
        columns: [
            {
                className: 'details-control',
                orderable: false,
                defaultContent: "",
                data: null,
                targets: 0
            },
            {
                className: 'data',
                data: "basketTitle",
                responsivePriority: 1
            },
            {
                className: 'data',
                data: "winner.username",
                render: function (data, type, row) {
                    if (data == null)
                        return "N/A";
                    else
                        return data;
                },
                responsivePriority: 3
            },
            {
                className: 'data',
                data: "tickets",
                render: function (data, type, row) {
                    var sum = 0;
                    data.forEach(function (ticketModel) { sum += ticketModel.numTickets })
                    return sum;
                },
                responsivePriority: 2
            }
        ]
    });

    function drawAuction() {
        $("#PageLoadingModal").css("display", "flex");
        $.ajax({
            url: "/api/auctions/@Model.AuctionId/draw",
            method: "post",
            beforeSend: function (xhr) { //add token
                var token = getCookie("BearerToken");
                if (token != "")
                    xhr.setRequestHeader("Authorization", "Bearer " + token);
            },
            success: function (data) {
                basketTable.DataTable().ajax.reload(null, false); //reload table
                $("#PageLoadingModal").css("display", "none");
                $("#drawAuctionButton").remove(); //hide draw button
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                //HANDLE DRAW ERROR
                $("#error-alert p").html(XMLHttpRequest.responseText);
                $("#error-alert p").css("display", "block");
                $("#PageLoadingModal").css("display", "none");
            }
        });
    }

    //CHART SCRIPT HERE

    var salesData;
    function loadChart() {
        var ctx = $('#salesChart');

        var startDate = new Date(Date.parse("@Model.StartTime.Date"));
        var endDate = new Date(Date.parse("@Model.EndTime.Date"));
        $.ajax({
            url: "/api/data/auction/@Model.AuctionId",
            beforeSend: function (xhr) { //add token
                var token = getCookie("BearerToken");
                if (token != "")
                    xhr.setRequestHeader("Authorization", "Bearer " + token);
            },
            success: function (data) {
                salesData = data;
                var data = [];

                for (var key in salesData) {
                    data.push({
                        x: key,
                        y: salesData[key]["amount"] / 100 //in cents
                    });
                }

                let chart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        datasets: [{
                            label: 'Sales',
                            backgroundColor: 'rgba(210, 235, 245, 1)',
                            data: data
                        }],
                    },
                    options: {
                        maintainAspectRatio: false,
                        tooltips: {
                            callbacks: {
                                label: function (tooltipObj, data) {
                                    var sales = tooltipObj.value;
                                    var label = "$" + parseInt(sales).toFixed(2);
                                    return label;
                                },
                                title: function (tooltipObjs, data) {
                                    var date = tooltipObjs[0].label;
                                    date = moment(date).format("MM/DD/YYYY");
                                    return date;
                                }
                            }
                        },
                        lengend: {
                            display: false
                        },
                        title: {
                            display: true,
                            fontSize: 20,
                            text: "Ticket Sales"
                        },
                        responsive: true,
                        scales: {
                            yAxes: [{
                                ticks: {
                                    Min: 0,
                                    callback: function (value, index, values) {
                                        return "$" + parseInt(value).toFixed(2);
                                    }
                                },
                                scaleLabel: {
                                    display: true,
                                    labelString: "Sales (USD)"
                                }
                            }],
                            xAxes: [{
                                type: 'time',
                                distribution: 'linear',
                                time: {
                                    unit: 'day'
                                }
                            }]
                        }
                    }
                });

                var tableData = [];
                for (var day of Object.values(salesData)) {
                    for (var transaction of day["breakdown"]) {
                        tableData.push(transaction);
                    }
                }
                var tableContainer = $("#salesTable");
                tableContainer.DataTable({
                    data: tableData,
                    responsive: {
                        details: {
                            type: 'column'
                        }
                    },
                    columns: [
                        {
                            searchable: false,
                            targets: 0,
                            className: 'control',
                            orderable: false,
                            defaultContent: "",
                            data: null
                        },
                        {
                            data: "time",
                            render: function (data, type, row) {
                                return moment(data).format("MM/DD hh:mm");
                            },
                            responsivePriority: 2
                        },
                        {
                            data: "amount",
                            render: function (data, type, row) {
                                return "$" + parseInt(data).toFixed(2);
                            },
                            responsivePriority: 1
                        },
                        {
                            data: "username",
                            responsivePriority: 3
                        }
                    ]
                });
            },
            error: function (xhr) {
                ctx.html(xhr.responseText);
            }
        });

    }

    function viewBasket(basketId) {
        var baskets = $("#basketTable").DataTable().data()
        var basket;
        for (var i = 0; i < baskets.length; i++) { //find basket data
            if (baskets[i].basketId == basketId) {
                basket = baskets[i];
                break;
            }
        }

        if (basket == null) //basket not found
            return;


            var html = `<div class="card mb-3 basketCard" style="border-radius: 30px" data-id="` + basket["basketId"] + `" data-loaded="false">\
                    <h3 class="card-header" style="font-size:114%">`+ basket["basketTitle"]
            html += `</h3>\
                <div style="height:300px; overflow:hidden;z-index:2">\
                    <div id="gallery-`+ basket["basketId"] + `" class="galleria basketCardImages" style="z-index:1;background-color:rgba(0, 0, 0, 0.00); height:300px; width:inherit">`;
                        //ADD PHOTOS
                        basket["photos"].forEach(function(photo){
                            html += `<img src="` + photo["url"] + `" />`;
                        });
                    html += `</div>\
                    <div id="basket-`+ basket["basketId"] + `-details" style="opacity:0; display:none; height:270px; overflow-y:auto;">\
                        <div class="modalHeader">Description:</div>
                        <div class="basketDesc" style="text-align:center;">\
                            `+ basket["basketDescription"] + `\
                        </div>\
                        <div class="modalHeader">Contents:</div>
                        <table class="basketContents table">\
                            <tbody style="display:flex; justify-content:center; flex-wrap: wrap;">`;
                        //add contents
                        basket["basketContents"].forEach(function (element) {
                            html += "<tr style='flex-basis: 50%; display:flex; justify-content:center' class='table-light'>"; //build list
                            html += "<td style='padding: unset;'>" + element + "</td>";
                            html += "</tr>";
                        });

                        html +=
                            `</tbody>\
                        </table>\
                    </div>\
                </div>\
                <div class="basketButtons" style="display:flex; margin-top:-30px; z-index:2">`;
            html += `<button class="btn btn-primary viewDetails" style="flex:1;">Details</button>\
                </div>\
            </div>`
        $("#basketDetailsModal").html(html);
        $("#basketDetailsModal").css("display", "flex");
        Galleria.run("#basketDetailsModal .galleria");
        }

    $(loadChart);

    $("#basketDetailsModal").on("click", function (e) {
        if ($(e.target).hasClass("card"))
            e.stopPropagation();
        else if ($(e.target).attr("id") == "basketDetailsModal")
            $(e.target).css("display", "none");
    })

    $(document).on("click", ".viewDetails", function (e) {
        var card = $(this).closest(".basketCard");
        var gallery = card.find(".galleria");
        var desc = card.find("[id$=-details]");
        if (gallery.position().top == 0) //when galleria is collapsed. open galleria
        {
            desc.animate({
                opacity: 0
            }, 500, function () {
                desc.css("display", "none");
                gallery.css("display", "block");
                gallery.data('galleria').resize(); //if page was resized while not displaying, the gallery is invisible
                gallery.animate({ opacity: 1 }, 500);
                card.find(".viewDetails").html("Details");
            });
        }
        else { //when galleria is open
            gallery.animate({
                opacity: 0
            }, 500, function () {
                gallery.css("display", "none");
                desc.css("display", "block");
                desc.animate({ opacity: 1 }, 500);
                card.find(".viewDetails").html("Images");
            });
        }
    });

    function basketInfoFormat(basket) {
        // `d` is the original data object for the row
        var html = `<div style="display:flex; flex-wrap:wrap">`;
        if (basket.winner != null) {
            var winner = basket.winner;
            html += '<div style="flex:1; display:flex; flex-direction:column; justify-content:center; align-items:center;"><h2>Winner Info</h2>' +
                '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;">' +
                '<tr>' +
                '<td>Full name:</td>' +
                '<td>' + winner.firstName + " " + winner.lastName + '</td>' +
                '</tr>' +
                '<tr>' +
                '<td>Email:</td>' +
                '<td>' + winner.email + '</td>' +
                '</tr>' +
                '<tr>';
            if (winner.address != null) {
                html += '<td>Address:</td>' +
                    '<td>' + winner.address + " " + winner.city + ", " + winner.state + " " + winner.zip + '</td>' +
                    '</tr>';
            }
            html += '</table></div>';
        }
        if (basket.submittingUser != null) {
            var submitter = basket.submittingUser;
            if (submitter.firstName == "")
                submitter.firstName = "You"; //for orgs
            html += '<div style="flex:1; display:flex; flex-direction:column; justify-content:center; align-items:center;"><h2>Submitter Info</h2>' +
                '<table cellpadding="5" cellspacing="0" border="0" style="padding-left:50px;">' +
                '<tr>' +
                '<td>Full name:</td>' +
                '<td>' + submitter.firstName + " " + submitter.lastName + '</td>' +
                '</tr>' +
                '<tr>' +
                '<td>Email:</td>' +
                '<td>' + submitter.email + '</td>' +
                '</tr>' +
                '<tr>';
            if (submitter.address != null) {
                html += '<td>Address:</td>' +
                    '<td>' + submitter.address + " " + submitter.city + ", " + submitter.state + " " + submitter.zip + '</td>' +
                    '</tr>';
            }
            html += '</table></div>';
        }
        html += "</div>";
        return html;
    }

    $('#basketTable tbody').on('click', 'td.details-control', function () {
        var tr = $(this).closest('tr');
        var row = basketTable.DataTable().row(tr);

        if (row.child.isShown()) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass('shown');
        }
        else {
            // Open this row
            row.child(basketInfoFormat(row.data())).show();
            tr.addClass('shown');
            row.child().css("background-color", "white") //no hover coloring
        }
    });

    window.history.replaceState(null, "", '/auctions/editAuction/@Model.AuctionId'); //always keeps URL functioning
</script>



