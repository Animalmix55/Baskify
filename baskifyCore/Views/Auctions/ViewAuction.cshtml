@model baskifyCore.ViewModels.UserAuctionViewModel
@{
    ViewData["Title"] = Model.AuctionModel.Title;
    var disablePurchase = Model.UserModel.UserRole != Roles.USER; //stops non-logged/companies
}


<style>
    .basketCardImages .galleria-bar {
        display: none;
    }
</style>
<script src="https://js.stripe.com/v3/"></script>
<script src="~/galleria/galleria.min.js"></script>
<div id="paymentSucceedAlert2" class="alert alert-dismissible alert-success" style="display:none;">
    <button type="button" class="close" data-hide="alert">&times;</button>
    Payment succeeded! You may now use your tickets!
</div>
<div id="ticketAddFailed" class="alert alert-dismissible alert-danger" style="display:none;">
    <button type="button" class="close" data-hide="alert">&times;</button>
    <strong>Error!</strong> <span>We were unable to add your ticket to the basket selected!</span>
</div>

@if (disablePurchase)//warn the user
{
    <div class="alert alert-dismissible alert-warning" style="margin-bottom: 0;">
        <button type="button" class="close" data-hide="alert">&times;</button>
        <h4 class="alert-heading">You cannot currently contribute!</h4>
        <p class="mb-0">Create a user account to contribute to this auction!</p>
    </div>
}
else if (Model.AuctionModel.DeliveryType == DeliveryTypes.DeliveryByOrg || Model.AuctionModel.DeliveryType == DeliveryTypes.DeliveryBySubmitter)
{
    <div class="alert alert-dismissible alert-warning" style="margin-bottom: 0;">
        <button type="button" class="close" data-hide="alert">&times;</button>
        <h4 class="alert-heading">Delivery Info</h4>
        <p class="mb-0">
            The organization has arranged for you to be delivered any baskets that you win. Your name, address, and email will be shared
            with the organization @if (Model.AuctionModel.DeliveryType == DeliveryTypes.DeliveryBySubmitter) { WriteLiteral("and/or basket donor"); } to
            facilitate delivery.
        </p>
    </div>
}
else if (Model.AuctionModel.DeliveryType == DeliveryTypes.Pickup)
{
    <div class="alert alert-dismissible alert-warning" style="margin-bottom: 0;">
        <button type="button" class="close" data-hide="alert">&times;</button>
        <h4 class="alert-heading">Delivery Info</h4>
        <p class="mb-0">
            The organization requires that any baskets won be picked up at their central location 
            @decimal.Round((decimal)baskifyCore.Utilities.SearchUtils.getMiles(Model.AuctionModel.Latitude, Model.AuctionModel.Longitude, Model.UserModel.Latitude, Model.UserModel.Longitude), 2) miles away
            from your account address.
        </p>
    </div>
}

<div id="AuctionBody" style="display:flex; flex-wrap:wrap; justify-content:center" class="maxWidthContainer">
    @if (!disablePurchase)
    {
        <div id="purchaseTicketsButton" style="cursor:pointer; position:fixed; right:10px; bottom:10px; z-index: 9999">
            <img src="~/Content/ticketIcon.png" style="height:94px" />
            <div id="walletBalance" style="font-size:150%; font-weight: bold; position: absolute; text-align:center; top: 50%;left: 50%;transform: translate(-50%, -50%);">
                @if (Model.Wallet.WalletBalance == 0)
                {
                    <text>Purchase Tickets</text>
                }
                else
                {
                    <text><span>@Model.Wallet.WalletBalance</span> Tickets</text>
                }
            </div>
            <div class="arrow" style="font-size: 450%;font-weight: bold;position: absolute;text-align:center;top: 50%;left: 13px;transform: translateY(-50%); opacity: 0">&larr;</div>
        </div>
    }

    <img src="@Model.AuctionModel.BannerImageUrl" style="width: 100%; height: auto;" />
    <div style="padding-left:10px;margin-top: 10px; margin-bottom: 10px; width: 100%">
        <div style="display:flex"><h2>@Model.AuctionModel.Title</h2><div class="text-muted" style="margin-left:auto">Benefitting @Model.AuctionModel.HostUser.OrganizationName</div></div>
        <div class="text-muted" style="display: flex; width: 100%; justify-content: inherit">
            <span>@Model.AuctionModel.StartTime - @Model.AuctionModel.EndTime</span>
        </div>
        <div style="max-width: 100%;">
            @Model.AuctionModel.Description
        </div>
        <hr class="my-4">
    </div>

    <div id="navigation" style="display:flex; width:100%">
        <div id="pages" style="margin-right:auto;"></div>
        <form id="numPerPageForm" style="margin-left:auto; display:flex; height:35px; align-items:center;">
            <label for="numPerPage" style="margin-bottom:unset;">Per Page:</label>
            <input name="numPerPage" class="form-control" style="height:100%; width:50px; padding: unset; margin-left:5px;" type="number" min="3" max="100" />
            <input type="submit" class="btn btn-info" style="padding:unset; height:100%;padding: 0px 6px 0px 6px;" value="Apply" />
        </form>
    </div>

    <div id="basketContainer" style="display:flex; flex-wrap:wrap; justify-content:space-evenly; width:100%;">

    </div>
</div>

<div class="modal" id="purchaseTicketsModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalHeader">Purchase Tickets</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="payment-form">
                <div class="modal-body" id="ticketModalBody">
                    <div id="paymentFailedAlert" class="alert alert-dismissible alert-danger" style="display:none;">
                        <span>Woops! There's been an error! Try again!</span>
                    </div>
                    <div id="paymentSucceedAlert" class="alert alert-dismissible alert-success" style="display:none;">
                        Payment succeeded!
                    </div>


                    <label for="numTickets">Number of Tickets</label>
                    <input type="number" class="form-control" id="numTickets" min="@Math.Ceiling(Model.AuctionModel.MinPurchase / Model.AuctionModel.TicketCost)" max="1000" value="@Math.Ceiling(Model.AuctionModel.MinPurchase / Model.AuctionModel.TicketCost)" />
                    <div id="card-element" style="padding: 10px 0px 0px 10px;">
                        <!-- Elements will create input elements here -->
                    </div>

                    <!-- We'll put the error messages in this element -->
                    <div id="card-errors" role="alert"></div>

                </div>
                <div class="modal-footer" style="flex-wrap:nowrap;">
                    <button style="font-size:150%; width: 100%;" class="btn btn-success" id="buyTickets">
                        Pay $<span>@decimal.Round((decimal)(Math.Ceiling(Model.AuctionModel.MinPurchase / Model.AuctionModel.TicketCost) * Model.AuctionModel.TicketCost), 2)</span>
                    </button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </form>
        </div>
    </div>
</div>
<div id="toasts" style="z-index:100;position:fixed; left:0; bottom:0;"></div>



<script>
    var currentPage = 1;

    var ticketOut = true;
    var currentSelectedBasketId = -1;
    var errorMessage = null;
    var clientSecret = null;
    var walletBalance = @Model.Wallet.WalletBalance; //balance of wallet

        $(document).ajaxError(function (event, jqxhr, settings, thrownError) {
            if (jqxhr.status == 401) { //unauthorized due to bad login
                openSignOnModal();
            }
        });

    $(function () {
        Galleria.loadTheme('/galleria/themes/twelve/galleria.twelve.js');
        Galleria.configure({
            imageCrop: true,
            lightbox: true,
            transition: 'fade',
            idleMode: false
        });
    }()); //loads galleria

    function toggleTicket(){
        if (ticketOut) {
            $("#purchaseTicketsButton").animate({ right: "-143px" }, 500, function () {
                $("#purchaseTicketsButton .arrow").animate({ opacity: "1" }, 200);
            });
            ticketOut = false;
        }
        else { //entend out
            $("#purchaseTicketsButton .arrow").animate({ opacity: "0" }, 200, function () {
                $("#purchaseTicketsButton").animate({ right: "10px" }, 500);
            });
            ticketOut = true;
        }
    }

        $("#purchaseTicketsButton").click(function () { //what happens when you click purchase ticket button
            if (!ticketOut) //if hidden, pop out
                toggleTicket();
            else {
                $(".modal").modal("hide"); //hide other modals
                $("#purchaseTicketsModal").modal("show");
            }
        });

        $(document).scroll(function () {
            if (ticketOut)
                toggleTicket();
        });

        numToasts = 0;
        function createAddToast(basketName, numTickets) {
            numToasts += 1;
            var html =
            `<div class="toast" id="toast-` + numToasts +`" role="alert" aria-live="assertive" aria-atomic="true" data-delay="10000">\
              <div class="toast-header">\
                <strong class="mr-auto">Tickets Added</strong>\
                <small class="text-muted">Now</small>\
                <button type="button" class="ml-2 mb-1 close" data-dismiss="toast" aria-label="Close">\
                  <span aria-hidden="true">&times;</span>\
                </button>\
              </div>\
              <div class="toast-body">`;
            html += `You successfully added ` + numTickets + ` ticket(s) to ` + basketName + `!\
              </div>\
            </div>`;

            $('#toasts').append(html); //add toast to body
            $('#toast-' + numToasts).toast("show");
        }

        //Adds basket to DOM
        function addBasket(basket) {
            var container = $("#basketContainer");
            var html = `<div class="card mb-3 basketCard" style="border-radius: 30px" data-id="` + basket["basketId"] + `" data-loaded="false">\
                    <h3 class="card-header" style="font-size:114%">`+ basket["basketTitle"]

            @if (!disablePurchase) {
                WriteLiteral("html += \"(<span class='text-muted'>\" + basket[\"numTickets\"] + \"</span>)\";");
            }

            html += `</h3>\
                <div style="height:300px; overflow:hidden">\
                    <div id="gallery-`+ basket["basketId"] + `" class="galleria basketCardImages" style="z-index:1;background-color:rgba(0, 0, 0, 0.00); height:300px; width:inherit">`;
                        //ADD PHOTOS
                        basket["photos"].forEach(function(photo){
                            html += `<img src="` + photo["url"] + `" />`;
                        });
                    html += `</div>\
                    <div id="basket-`+ basket["basketId"] + `-details" style="opacity:0; display:none; height:270px; overflow-y:auto;">\
                        <div class="modalHeader">Description:</div>
                        <div class="basketDesc" style="text-align:center;">\
                            `+ basket["basketDescription"] + `\
                        </div>\
                        <div class="modalHeader">Contents:</div>
                        <table class="basketContents table">\
                            <tbody style="display:flex; justify-content:center; flex-wrap: wrap;">`;
                        //add contents
                        basket["basketContents"].forEach(function (element) {
                            html += "<tr style='flex-basis: 50%; display:flex; justify-content:center' class='table-light'>"; //build list
                            html += "<td style='padding: unset;'>" + element + "</td>";
                            html += "</tr>";
                        });

                        html +=
                            `</tbody>\
                        </table>\
                    </div>\
                </div>\
                <div class="basketButtons" style="display:flex; margin-top:-30px; z-index:2">`;
            @if (!disablePurchase)
            {
                <text>
                html += `<button class="addTicket btn btn-primary"`;
                if(walletBalance == 0) //disable if wallet is empty
                    html += " disabled";
                html += ` style="flex:1;">Add Tickets</button>`;
                </text>
            }
            html += `<button class="btn btn-primary viewDetails" style="flex:1;">Details</button>\
                </div>\
            </div>`
            container.append(html);
        }

        var currentDropdownId;
        //targetButton is the addTicket button that triggered the event
        function toggleTicketDropdown(basketId) {
            var oldCard = $(".basketCard[data-id=" + currentDropdownId + "]");
            var dropDownCard = $(".basketCard[data-id=" + basketId + "]");
            var currentDropdown = $(".addTicket-form");

            if ($("#addTicket-form-" + dropDownCard.attr("data-id")).length == 0) { //the window isn't already open
                var elementBottom = dropDownCard.find(".basketButtons").offset().top - 45;
                var cardWidth = dropDownCard.innerWidth();
                var cardLeft = dropDownCard.offset().left + (dropDownCard.outerWidth(true) - dropDownCard.innerWidth()) / 2;
                var html =
                    `<form class="addTicket-form" id="addTicket-form-` + dropDownCard.attr("data-id") + `" style="height: 45px;z-index:3;display:flex; overflow: hidden; opacity:0; position:absolute; top:` + elementBottom + `px; left:` + cardLeft + `px; width:` + cardWidth + `px">\
                    <input type="hidden" name="basketId" value="`+ dropDownCard.attr("data-id") + `"/>\
                    <div style="display: flex; justify-content:center; width: 100%;">\
                        <input type="number" style="height:100%;flex:.8" class="form-control" name="numTickets" value="1" min="0" max="` + walletBalance + `" />\
                        <button style="flex:.2; line-height:105%;" class="btn btn-success" id="addTickets">\
                            Add Tickets\
                        </button>\
                    </div>\
                </form>`;
                if (currentDropdown != null) {
                    oldCard.find(".addTicket").html("Add Ticket");
                    currentDropdown.animate({ opacity: "0" }, 500, function () {
                        $(this).remove();
                    }); //close the old dropdown, if one exists
                }
                $("body").prepend(html);
                dropDownCard.find(".addTicket").html("Cancel");
                currentDropdown = $("#addTicket-form-" + dropDownCard.attr("data-id"));
                currentDropdown.animate({ opacity: "1" }, 500); //drop it down
                currentDropdownId = dropDownCard.attr("data-id");
            }
            else {
                dropDownCard.find(".addTicket").html("Add Ticket");
                currentDropdown.animate({ opacity: "0" }, 500, function () {
                    $(this).remove();
                }); //shrink and remove from DOM

            }

        }

        $(window).resize(function () { //make the card popup reactive
            if ($(".addTicket-form").length == 0) //don't both if there's nothing to resize
                return;
            var card = $(".basketCard[data-id=" + currentDropdownId + "]");
            var elementTop = card.find(".galleria-stage").offset().top + card.find(".galleria-stage").outerHeight(false) - 45;
            var cardWidth = card.innerWidth();
            var cardLeft = card.offset().left + (card.outerWidth(true) - card.innerWidth()) / 2;
            $(".addTicket-form").first().css({
                top: elementTop + "px",
                width: cardWidth + "px",
                left: cardLeft + "px"
            });
        });//ensure any dropups stay with their parent


        //when a add ticket button on a basket card is clicked
        $(document).on("click", ".addTicket", function (e) {
            toggleTicketDropdown($(this).closest(".basketCard").attr("data-id"));
        });

        var baskets = [];
        function loadBaskets() {
            $.ajax( //load in all of the baskets
                {
                    url: "/api/auctions/@Model.AuctionModel.AuctionId/baskets",
                    method: "GET",
                    beforeSend: function (xhr) { //add token
                        var token = getCookie("BearerToken");
                        if (token != "")
                            xhr.setRequestHeader("Authorization", "Bearer " + token);
                    },
                    success: function (result) {
                        baskets = result;
                        var page = getParameterByName("page");
                        page = page == "" ? 1 : parseInt(page);
                        loadPage(page); //load page, sets current page
                        buildPagination();
                    }
                });
        }

        $("#numPerPageForm").submit(function (e) {
            e.preventDefault();
            numPerPage = parseInt($(this).find(`[name="numPerPage"]`).val());
            history.replaceState(null, "", UpdateQueryString("itemsPerPage", numPerPage)); //update query string
            loadPage(1);
            buildPagination();
        });

        function buildPagination() {
            var itemsPerPage = getParameterByName("itemsPerPage");
            itemsPerPage = itemsPerPage == "" ? 9 : parseInt(itemsPerPage);
            $("#numPerPageForm [name='numPerPage'").val(itemsPerPage); //set change form
            //baskets must alrady be populated
            var numPages = Math.ceil(baskets.length / itemsPerPage);
            var firstPage = currentPage - 2 < 1 ? 1 : currentPage - 2;
            var container = $("#pages");
            if (numPages < 2) { //don't bother if there's only one page
                container.html(""); //remove nav
                return;
            }

            var html = `
            <ul class="pagination">\
                <li class="page-item`;
            if (currentPage == 1)
                html += ` disabled`;

                html += `" id="page-1-chevron">\
                    <a class="page-link" style="cursor:pointer" onclick="loadPage(1)">&laquo;</a>\
                </li>`;
                for (i = 0; i <= 4; i++)
                {
                    html += `<li class="page-item number` + ((currentPage == firstPage + i) ? " active" : "") + `" id="page-` + (firstPage + i) + `">\
                        <a class="page-link" style="cursor:pointer" onclick="loadPage(` + (firstPage + i) + `)">` + (firstPage + i) + `</a>\
                    </li>`;

                    if (numPages < firstPage + i + 1)//this means that we reached the max page
                    {
                        break;
                    }
                }

                html += `<li class="page-item ` + ((currentPage == numPages) ? ` disabled` : "") + `" id="page-` + numPages + `-chevron">\
                    <a class="page-link" style="cursor:pointer" onclick="loadPage(` + numPages + `)">&raquo;</a>\
                </li>\
            </ul>`;
            container.html(html);

        }

        function loadPage(pageNum) {
            $(".addTicket-form").remove(); //closes all ticket popups before new page
            var itemsPerPage = getParameterByName("itemsPerPage");
            itemsPerPage = itemsPerPage == "" ? 9 : parseInt(itemsPerPage); //default 9 items per page
            //baskets must alrady be populated
            var numPages = Math.ceil(baskets.length / itemsPerPage);

            if (pageNum > numPages) //force the page to be #1
                pageNum = 1;

            var container = $("#basketContainer");
            container.html(""); //clear container
            var startIndex = (pageNum - 1) * itemsPerPage;
            var numEntries = baskets.length;
            if (startIndex > numEntries - 1) //don't bother if loading more baskets than exist
            {
                container.html("Invalid page number!");
                return;
            }
            var endIndex = (pageNum) * itemsPerPage - 1;
            endIndex = endIndex + 1 <= numEntries ? endIndex : numEntries - 1; //make sure index doesn't escape array

            numbers = $(".pagination .number");
            if (numPages > numbers.length) {
                var lowest = pageNum - 2 > 0 ? pageNum - 2 : 1; //the lowest value in list
                if (lowest + numbers.length - 1 > numPages)
                    lowest = numPages - numbers.length + 1;
                numbers.each(function (i) { //should be 5 elements in numbers, i=0->4
                    var pageNumber = lowest + i;
                    var link = $(this).find("a");
                    link.attr("onclick", "loadPage(" + pageNumber + ")");
                    $(this).attr("id", "page-" + pageNumber);
                    link.html(pageNumber);
                });
            }

            $(".pagination li").removeClass("active"); //deactivate all
            $("#page-" + pageNum).addClass("active"); //activate current page
            $("[id$=-chevron]").removeClass("disabled"); //enable all chevrons
            if (pageNum == numPages || pageNum == 1)
                $("#page-" + pageNum + "-chevron").addClass("disabled"); //disable any chevron we are at

            for (i = startIndex; i <= endIndex; i++) {
                addBasket(baskets[i]); //add page's worth of baskets
            }
            Galleria.run('.galleria');
            history.replaceState(null, "", UpdateQueryString("page", pageNum));
            currentPage = pageNum;
        }

        $(function () {
        loadBaskets();
        var stripe = Stripe('@ViewData["StripePublicKey"]');
        elements = stripe.elements();
        // Set up Stripe.js and Elements to use in checkout form
        var style = {
            base: {
                color: "#32325d",
            }
        };

        var card = elements.create("card", { style: style });
        card.mount("#card-element");

        $("#card-element").on('change', function (event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

        var form = document.getElementById('payment-form'); //swipe form

        $(form).on('submit', function (ev) {
            ev.preventDefault();
            $("#PageLoadingModal").css("display", "flex");
            $("#buyTickets").attr("disabled", "");
            $.ajax({
                url: "/api/wallets/@Model.AuctionModel.AuctionId/getsecret",
                method: "POST",
                data: {
                    tickets: $("#numTickets").val()
                },
                beforeSend: function (xhr) {
                    var token = getCookie("BearerToken");
                    if (token != "")
                        xhr.setRequestHeader("Authorization", "Bearer " + token);
                },
                success: function (data) {
                    stripe.confirmCardPayment(data, {
                        payment_method: {
                            card: card,
                            billing_details: {
                                name: '@Model.UserModel.FirstName @Model.UserModel.LastName'
                            }
                        }
                    }).then(function (result) {
                        if (result.error) {
                            $("#purchaseTicketsModal .alert, #paymentSuccessAlert2").css("display", "none"); //hide other messages
                            $("#paymentFailedAlert span").html(result.error.message);
                            $("#paymentFailedAlert").css("display", "block");
                            $("#buyTickets").removeAttr("disabled");
                            $("#PageLoadingModal").css("display", "none");
                        }
                        else { //check until we get a verdict
                            var intervalId = setInterval(function () {
                                $.ajax({
                                    url: "/api/wallets/checkpayment/" + encodeURI(result.paymentIntent.id),
                                    method: "GET",
                                    beforeSend: function (xhr) {
                                        var token = getCookie("BearerToken");
                                        if(token != "")
                                            xhr.setRequestHeader("Authorization", "Bearer " + token);
                                    },
                                    success: function (data) {
                                        if (data.result == "Failure") {
                                            $("#purchaseTicketsModal .alert, #paymentSuccessAlert2").css("display", "none"); //hide other messages
                                            $("#paymentFailedAlert span").html(result.error.message);
                                            $("#paymentFailedAlert").css("display", "block");
                                            clearInterval(intervalId); //stop checking
                                            $("#buyTickets").removeAttr("disabled");
                                            $("#PageLoadingModal").css("display", "none");
                                        }
                                        else if (data.result == "Success") {
                                            // The payment has been processed!
                                            if (result.paymentIntent.status === 'succeeded') {
                                                $("#purchaseTicketsModal .alert").css("display", "none"); //hide other messages
                                                $("#paymentSucceedAlert, #paymentSuccessAlert2").css("display", "block");
                                                elements.getElement("card").clear();
                                                clearInterval(intervalId);
                                                $("#buyTickets").removeAttr("disabled");
                                                $("#PageLoadingModal").css("display", "none");
                                                walletBalance = data.numTickets;
                                                $("#walletBalance").html("<span>" + walletBalance + "</span> Tickets");
                                                $(".addTicket").removeAttr("disabled"); //enable ticket button
                                            }
                                        }
                                    }
                                });
                            }, 2000); //every 2 seconds, see if transaction succeeded
                        }
                    });
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    $("#purchaseTicketsModal .alert, #paymentSuccessAlert2").css("display", "none"); //hide other messages
                    $("#paymentFailedAlert span").html(XMLHttpRequest.responseText);
                    $("#paymentFailedAlert").css("display", "block");
                    $("#buyTickets").removeAttr("disabled");
                    $("#PageLoadingModal").css("display", "none");
                }
            });

        });



    });

    $("#numTickets").on('input', function () { //update ticket cost/number with slider
        $("#buyTickets span").html((@Model.AuctionModel.TicketCost * $("#numTickets").val()).toFixed(2));
        $("#numTicketLabel span").html($("#numTickets").val());
    });

        //View basket details
        $(document).on("click", ".viewDetails", function (e) {
            var card = $(this).closest(".basketCard");
            var gallery = card.find(".galleria");
            var desc = card.find("[id$=-details]");
            if (gallery.position().top == 0) //when galleria is collapsed. open galleria
            {
                desc.animate({
                    opacity: 0
                }, 500, function () {
                    desc.css("display", "none");
                    gallery.css("display", "block");
                    gallery.data('galleria').resize(); //if page was resized while not displaying, the gallery is invisible
                    gallery.animate({ opacity: 1 }, 500);
                    card.find(".viewDetails").html("Details");
                });
            }
            else { //when galleria is open
                gallery.animate({
                    opacity: 0
                }, 500, function () {
                    gallery.css("display", "none");
                    desc.css("display", "block");
                    desc.animate({ opacity: 1 }, 500);
                    card.find(".viewDetails").html("Images");
                });
            }
        });

        $(document).on('submit', '.addTicket-form', function (e) {
            var form = $(".addTicket-form");
            e.preventDefault();
            var basketId = form.find("[name=basketId]").val();
            var numTickets = form.find("[name=numTickets]").val();
            addTicket(basketId, numTickets);
            toggleTicketDropdown(basketId);
            return false;
        });

    function addTicket(basketId, numTickets) {
        $.ajax({
            url: "/api/baskets/" + basketId + "/ticket/add/" + numTickets,
            method: "POST",
            beforeSend: function (xhr) {
                var token = getCookie("BearerToken");
                if (token != "")
                    xhr.setRequestHeader("Authorization", "Bearer " + token);
            },
            success: function (data) {
                $(".basketCard[data-id=" + basketId + "]").find("h3 span").html(data.numTickets); //update ticket count on basket card
                if (walletBalance - numTickets > 0)
                    $("#walletBalance span").html(walletBalance - numTickets); //add to purchase button
                else
                    $("#walletBalance").html("Purchase Tickets");
                walletBalance -= numTickets;
                if (walletBalance == 0)
                    $(".addTicket").attr("disabled", ""); //disable if all spent
                $("#ticketAddFailed").css("display", "none"); //remove any error message
                createAddToast(data.basketTitle, numTickets); //toast the success
                baskets.forEach(function (basket) {
                    if (basket.basketId == basketId)
                        basket.numTickets = data.numTickets; //to keep the inner state valid
                });
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                //HANDLE TICKET ADD ERROR
                $("#ticketAddFailed span").html(XMLHttpRequest.responseText);
                $("#ticketAddFailed").css("display", "block");
            }
        });
    }

</script>
