@model baskifyCore.Models.AuctionModel

@{
    ViewData["Title"] = "View";
}
<script src="~/galleria/galleria.min.js"></script>
<script src="~/js/moment-with-locales.js"></script>
@if (Model.StartTime > DateTime.UtcNow)
{
<script src="https://maps.googleapis.com/maps/api/js?key=@baskifyCore.Utilities.AuctionUtilities.getGoogleAPI()&callback=initMap" async defer></script>
}
<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />

<div id="basketDataModal" class="modal">
    @if (ViewData["basket"] != null)//if given a basket, load the modal with it
    {
        await Html.RenderPartialAsync("BasketModalPartialView", ViewData["basket"]);
        <script>$("#basketDataModal").modal("toggle")</script>
    }
</div>

<div id="accountSettings">
    <div id="accountSettingContainer">
        <div id="auctionAddLink" class="alert alert-dismissible alert-info">
            <button type="button" class="close" data-dismiss="alert">&times;</button>
            @if (Model.Link == null)
            {
                <span>Your auction does not yet have a sharable link for donors to upload baskets, click <a style="color:white; font-weight: bold; cursor: pointer;" onclick="getAuctionLink()">HERE</a> to get one!</span>
            }
            else
            {
                <span>Your sharable basket upload link is: <a href="/auctions/addBasket/@Model.Link.Link">@baskifyCore.Utilities.LoginUtils.getAbsoluteUrl("/auctions/addBasket/" + Model.Link.Link.ToString(), Context.Request)</a></span>
            }
        </div>
        <div class="goBack">Back to <a href="/auctions">Auctions</a></div>

        @if (!String.IsNullOrWhiteSpace(Model.BannerImageUrl))
        {
            <img class="AuctionBannerImage" src="@Model.BannerImageUrl" />
        }

        <ul class="nav nav-tabs" id="AuctionNavTabs">
            <li class="nav-item">
                <a class="nav-link active" data-toggle="tab" href="#auctionInfo">Auction Info</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" data-toggle="tab" href="#baskets">Baskets</a>
            </li>
        </ul>
        <div id="myTabContent" class="tab-content">
            <div class="tab-pane fade active show" id="auctionInfo">
                @using (Html.BeginForm("editAuction", "auctions", FormMethod.Post, new { @id = "auctionInfoForm", enctype = "multipart/form-data" }))
                {
                    @Html.ValidationSummary(true)

                    <fieldset>
                        <legend>Auction Information</legend>
                        <div class="form-group">
                            @Html.LabelFor(Model => Model.Title)
                            @Html.TextBoxFor(Model => Model.Title, null, new { @class = "form-control" })
                            @Html.ValidationMessageFor(Model => Model.Title)
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(Model => Model.Description)
                            @Html.TextAreaFor(Model => Model.Description, 5, 50, new { @class = "form-control" })
                            @Html.ValidationMessageFor(Model => Model.Description)
                        </div>

                        @if (Model.StartTime > DateTime.UtcNow)
                        {
                            <div class="form-group">
                                @Html.Label("Auction Date Range")
                                <input type="text" id="dateRangePicker" name="datetimes" class="form-control" />
                                @Html.HiddenFor(Model => Model.StartTime)
                                @Html.HiddenFor(Model => Model.EndTime)
                                @Html.ValidationMessageFor(Model => Model.StartTime)
                                @Html.ValidationMessageFor(Model => Model.EndTime)
                            </div>
                            <legend>Change Starting Address</legend>
                            <div class="form-group">
                                @Html.LabelFor(Model => Model.Address)
                                @Html.TextBoxFor(Model => Model.Address, null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(Model => Model.Address)
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(Model => Model.City)
                                @Html.TextBoxFor(Model => Model.City, null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(Model => Model.City)
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(Model => Model.State)
                                @Html.TextBoxFor(Model => Model.State, null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(Model => Model.State)
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(Model => Model.ZIP)
                                @Html.TextBoxFor(Model => Model.ZIP, null, new { @class = "form-control" })
                                @Html.ValidationMessageFor(Model => Model.ZIP)
                            </div>
                            <label style="color:red;" id="addressValidationResult"></label>
                            <div class="form-group">
                                @Html.LabelFor(Model => Model.MaxRange)
                                <div style="display: flex">
                                    @Html.TextBoxFor(Model => Model.MaxRange, null, new { @type = "range", @class = "custom-range", min = AuctionModel.MinDistance, max = AuctionModel.MaxDistance, flex = .9 })
                                    <div id="SelectedRange" style="font-weight: bold; flex: .1; white-space: nowrap; margin-left: 6px; min-width: 80px;"><span>@Model.MaxRange</span> miles</div>
                                </div>
                                @Html.ValidationMessageFor(Model => Model.MaxRange)
                            </div>
                            <div id="userAddressMap"></div>
                            <script>
                                var ServiceRadius;
                                var map;
                                var marker;
                                function initMap() {
                                    // Create the map.
                                    var initCoords = { lat: @Model.Latitude, lng: @Model.Longitude };

                                    map = new google.maps.Map(document.getElementById('userAddressMap'), {
                                        zoom: 10,
                                        center: initCoords,
                                        mapTypeId: 'terrain'
                                    });

                                    marker = new google.maps.Marker({
                                        position: initCoords,
                                        map: map,
                                        title: 'Your Organization'
                                    });

                                    ServiceRadius = new google.maps.Circle({
                                        strokeColor: '#FF0000',
                                        strokeOpacity: 0.8,
                                        strokeWeight: 2,
                                        fillColor: '#FF0000',
                                        fillOpacity: 0.35,
                                        map: map,
                                        center: initCoords,
                                        radius: @Model.MaxRange * 1609.34 //mile to meter conversion
                                    });
                                }

                            $("#MaxRange").on("change", function (e) {
                                if ($("#MaxRange").val() == @AuctionModel.MaxDistance) //unbind the radius if we hit max
                                    ServiceRadius.setMap(null);
                                else
                                    ServiceRadius.setMap(map);

                                $("#SelectedRange span").html($("#MaxRange").val() == @AuctionModel.MaxDistance? "&infin;" : $("#MaxRange").val());
                                    ServiceRadius.setRadius($("#MaxRange").val() * 1609.34)
                                });

                                $(function () {
                                    initMap();
                                    $('input[name="datetimes"]').daterangepicker({
                                        timePicker: true,
                                        startDate: "@Model.StartTime",
                                        endDate: "@Model.EndTime",
                                        locale: {
                                            format: 'MM/DD/YYYY hh:mm:ss A'
                                        },
                                        dateLimit: {
                                            'months': 1,
                                            'days': -1
                                        }
                                    });

                                    $("#dateRangePicker").on("change", function () {
                                        $("#StartTime").val($("#dateRangePicker").val().split(" - ")[0]);
                                        $("#EndTime").val($("#dateRangePicker").val().split(" - ")[1]);
                                    });

                                    $("#Address,#City,#State,#ZIP").on("blur", function () {//update address
                                        if ($("#Address").val() == "" || $("#City").val() == "" || $("#State").val() == "" || $("#ZIP").val() == "") {
                                            return
                                        }

                                        $.post("/account/validateAddress",
                                            {
                                                Address: $("#Address").val(),
                                                City: $("#City").val(),
                                                State: $("#State").val(),
                                                ZIP: $("#ZIP").val()
                                            },
                                            function (data) {
                                                var dataObject = JSON.parse(data);
                                                if (dataObject["resultStatus"] != "ADDRESS NOT FOUND") {
                                                    $("#Address").val(dataObject["addressLine1"]);
                                                    $("#City").val(dataObject["city"]);
                                                    $("#State").val(dataObject["state"]);
                                                    $("#ZIP").val(dataObject["zip"]);
                                                    var newLocation = { lat: parseFloat(dataObject["lat"]), lng: parseFloat(dataObject["lng"]) }
                                                    marker.setPosition(newLocation);
                                                    ServiceRadius.setCenter(newLocation);
                                                    ServiceRadius.setRadius($("#MaxRange").val() * 1609.34);
                                                    map.setCenter(newLocation);

                                                    $("#addressValidationResult").html("");
                                                }
                                                else {
                                                    $("#addressValidationResult").html("Address Not Found!");
                                                }
                                            });
                                    });
                                });

                            </script>
                        }
                        else //this auction has begun!
                        {
                            <div class="form-group">
                                @Html.Label("Auction Start Date")
                                @Html.TextBoxFor(Model => Model.StartTime, new { @readonly = "readonly", @class = "form-control" })
                                @Html.ValidationMessageFor(Model => Model.StartTime)
                                @Html.Label("Auction End Date")
                                @Html.TextBoxFor(Model => Model.EndTime, new { @class = "form-control" })
                                @Html.ValidationMessageFor(Model => Model.EndTime)
                            </div>
                            @Html.HiddenFor(Model => Model.Address)
                            @Html.HiddenFor(Model => Model.City)
                            @Html.HiddenFor(Model => Model.State)
                            @Html.HiddenFor(Model => Model.ZIP)

                            <script>
                            $(function () {
                                $('input[name="EndTime"]').daterangepicker({
                                    singleDatePicker: true,
                                    showDropdowns: true,
                                    locale: {
                                        format: 'MM/DD/YYYY hh:mm:ss A'
                                    },
                                    minYear: @DateTime.Today.Year,
                                    maxYear: @DateTime.Today.Year,
                                    timePicker: true,
                                    minDate: "@DateTime.UtcNow.AddHours(1)",
                                    maxDate: "@Model.StartTime.AddDays(31)",
                                    drops: "up",
                                    startDate: "@Model.EndTime"
                                });
                            });

                            </script>

                        }


                        @Html.HiddenFor(Model => Model.AuctionId)
                        @Html.HiddenFor(Model => Model.HostUsername)

                        <label for="exampleInputFile">Update Your Banner!</label>
                        <div class="form-group">
                            @Html.TextBoxFor(Model => Model.BannerImage, new { @type = "file", @class = "form-control-file", @id = "inputBannerFile" })
                            <small id="fileHelp" class="form-text text-muted">Upload an image that encapsulates your goal! Recommended: 300px x 1000px</small>
                        </div>
                        <div style="display: flex;">
                            <button id="updateButton" type="submit" class="btn btn-success btn-lg btn-block">Update Auction</button>
                        </div>
                    </fieldset>
                }
                @if (Model.StartTime > DateTime.UtcNow)
                {
                using (Html.BeginForm("deleteAuction", "Auctions", FormMethod.Post, new { @id = "deleteAuctionForm" }))
                {
                    @Html.HiddenFor(Model => Model.AuctionId, new { @id = "deleteAuctionId" });
                    <div style="display: flex;">
                        <button id="deleteButton" type="submit" class="btn btn-danger btn-lg btn-block">Delete Auction</button>
                    </div>
                }
                }
            </div>
            <div class="tab-pane fade" id="baskets">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th scope="col">Basket Name</th>
                            <th scope="col">Submitting User</th>
                            <th scope="col">Submission Date</th>
                            <th scope="col">
                                <button type="button" class="btn btn-primary btn-sm" onclick="viewBasket(-1)">Add New Basket</button>
                            </th>
                        </tr>
                    </thead>
                    <tbody id="basketListBody">
                        @if (Model.Baskets != null)
                        {
                            Model.Baskets = Model.Baskets.OrderBy(b => b.AcceptedByOrg).ToList();//order them
                            @foreach (var basket in Model.Baskets)
                            {
                                @if (basket.Draft)
                                    continue;//don't worry about draft baskets
                                @if (basket.AcceptedByOrg)
                                {
                                    <tr class="table-success" id="basketRow-@basket.BasketId" style="cursor: pointer">
                                        <td scope="row" onclick="viewBasket(@basket.BasketId)">@basket.BasketTitle</td>
                                        <td onclick="viewBasket(@basket.BasketId)">@basket.SubmittingUsername</td>
                                        <td onclick="viewBasket(@basket.BasketId)">@basket.SubmissionDate.ToShortDateString()</td>
                                        <td>
                                            @if (Model.StartTime > DateTime.UtcNow || !basket.AcceptedByOrg) //if the auction hasn't started yet OR basket hasn't been approved
                                            {
                                                <button type="button" class="close" onclick="deleteBasket(@basket.BasketId)" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                                <span class="rowError"></span>
                                            }
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    <tr class="table-danger" id="basketRow-@basket.BasketId" style="cursor: pointer">
                                        <td scope="row" onclick="viewBasket(@basket.BasketId)">@basket.BasketTitle <span class="badge badge-pill badge-primary">Unverified</span></td>
                                        <td onclick="viewBasket(@basket.BasketId)">@basket.SubmittingUsername</td>
                                        <td onclick="viewBasket(@basket.BasketId)">@basket.SubmissionDate.ToShortDateString()</td>
                                        @if (Model.StartTime > DateTime.UtcNow || !basket.AcceptedByOrg) //if the auction hasn't started yet OR basket not yet approved
                                        {
                                            <td>
                                                <button type="button" class="close" onclick="deleteBasket(@basket.BasketId)" aria-label="Close">
                                                    <span aria-hidden="true">&times;</span>
                                                </button>
                                                <span class="rowError"></span>
                                            </td>
                                        }
                                    </tr>
                                }
                            }

                        }
                    </tbody>
                </table>
                @if (Model.Baskets == null || Model.Baskets.All(b => b.Draft))
                {
                    <h4>This auction currently has no baskets</h4>
                }
            </div>
        </div>
    </div>
</div>
<script>
    function viewBasket(id) {//loads in the basket modal
        $.post("/basket/viewModal", { basketID: id, auctionID: @Model.AuctionId },
            function (data) {
                if (!data.startsWith("ERROR")) {
                    $("#basketDataModal").html(data);
                    $("#basketDataModal").modal("show");
                }
                else if(data == "ERROR: INVALID LOGIN"){
                    openSignOnModal(); //get signin
                }
                else if(id != -1)
                    $("#basketRow-"+id+" .rowError").html("ERROR");
            }
        );
    }
    function deleteBasket(id) {//deletes the given basket
        $.post("/basket/delete", { basketID: id, auctionID: @Model.AuctionId },
            function (data) {
                if (!data.startsWith("ERROR")) {
                    $("#basketRow-" + id).remove(); //empty row
                }
                else {
                    $("#basketRow-" + id + " .rowError").html("ERROR");
                }
            }
        );
    }
    function verifyBasket(id) {
    $.post("/Basket/verifyBasket", { basketId: id },
        function (data) {
            if (!data.startsWith("ERROR")) {
                $("#basketRow-" + id).removeClass("table-danger").addClass("table-success"); //make it green
                $("#basketRow-" + id + " .badge").remove(); //remove pill badge
                $("#verifyWarning").remove();
            }
            else {
                $("#verifyWarning .mb-0").html("Verification failed!");
            }
        });
    }
    function addBasketRow(basketId, SubmittingUser, SubmissionDate)
    {
        var html = '<tr class="table-danger" id="basketRow-'+basketId+'">\
                <td scope="row" onclick="viewBasket('+ basketId + ')">Provide a title <span class="badge badge-pill badge-primary">Unverified</span></td>\
                <td onclick="viewBasket('+ basketId + ')">'+ SubmittingUser +'</td>\
                <td onclick="viewBasket('+ basketId + ')">' + SubmissionDate + '</td>\
                <td>\
                    <button type="button" class="close" onclick="deleteBasket(' + basketId + ')" aria-label="Close">\
                        <span aria-hidden="true">&times;</span>\
                    </button>\
                    <span class="rowError"></span>\
                </td>\
            </tr>'
        $("#basketListBody").append(html);
    }

    $(document).ready(function () {
        $('a[data-toggle="tab"]').on('show.bs.tab', function (e) {
            localStorage.setItem('activeTab', $(e.target).attr('href'));
        });
        var activeTab = localStorage.getItem('activeTab');
        if (activeTab) {
            $("#AuctionNavTabs a").removeClass("active");
            $('a[href="' + activeTab + '"]').addClass("active");
            $('#myTabContent').children().removeClass('active show')
            $(activeTab).addClass('active show');
        }
    }); //sets the appropriate open tab

    var basketEditUrl = "/basket/orgUpdateBasket"; //important basket edit POST url

    $(function () {
        Galleria.loadTheme('/galleria/themes/classic/galleria.classic.js');
        Galleria.configure({
            imageCrop: false,
            _toggleInfo: false,
            lightbox: true,
            transition: 'fade'
        });
    }()); //loads galleria

    function getAuctionLink() {
        $.post("/auctions/getBasketShareLink", { auctionID: @Model.AuctionId},
            function (data) {
                if (data.startsWith("ERROR"))
                    $("#auctionAddLink span").html(data);
                else if (data.startsWith("http"))
                    $("#auctionAddLink span").html("Your sharable basket upload link is: <a href='" + data + "'>"+ data +"</a>");
        });
    }

    $("#auctionInfoForm").on("submit", function () { $("#PageLoadingModal").css("display", "flex"); }); //queue loading
    window.history.pushState("", "", '/auctions/editAuction/@Model.AuctionId'); //always keeps URL functioning
</script>

